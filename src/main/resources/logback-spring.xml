<?xml version="1.0" encoding="UTF-8"?>
<!-- author: curtin  Date:2019-03-10 23:35:29 -->

<!-- scan:当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为1分钟 -->
<!-- debug:当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<!-- <property> 设置变量 -->
	<!-- 用来定义变量值的标签，有两个属性，name和value -->
	<!-- 其中name的值是变量的名称，value的值时变量定义的值 -->
	<!-- 通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量 -->
	<!-- <property name="logback.appname" value="BlueWhaleLog" /> -->
	<!-- <property name="logback.logdir" value="/Users/curtin/Library/Log" /> -->

    <!--application.yml 传递参数，不能使用logback 自带的<property>标签 可以通过“${}”来使用变量-->
    <springProperty scope="context" name="appname" source="logback.appname"/>
    <springProperty scope="context" name="logdir" source="logback.logdir"/>
	
	<!-- <contextName> 设置上下文名称 -->
	<!-- 每个logger都关联到logger上下文，默认上下文名称为“default” -->
	<!-- 但可以使用设置成其他名字，用于区分不同应用程序的记录 -->
	<!-- 一旦设置，不能修改,可以通过 %contextName 来打印日志上下文名称，一般来说我们不用这个属性，可有可无 -->
	<contextName>${appname}</contextName>
	
	<!-- <appender> 用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略 -->
	<!-- 输出到控制台 ConsoleAppender -->
	<appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
		<!--展示格式 layout 控制台输出使用 layout ，文件输出使用 encoder -->
		<layout class="ch.qos.logback.classic.PatternLayout">
			<!-- <charset>UTF-8</charset> -->
			<!-- %d{HH: mm:ss.SSS}——日志输出时间 -->
			<!-- %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用 -->
			<!-- %-5level——日志级别，并且使用5个字符靠左对齐 -->
			<!-- %logger{36}——日志输出者的名字 最长36个字符，否则按照句点分割 -->
			<!-- %line——行数 -->
			<!-- %msg——日志消息 -->
			<!-- %n——平台的换行符 -->
			<pattern>%d %contextName [%thread] %-5level %logger{36} %line : %msg%n</pattern>
		</layout>
	</appender>

	<!-- RollingFileAppender 用于切分文件日志 -->
	<appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，所以我们使用下面的策略，可以避免输出 Error 的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 过滤 Error -->
			<level>ERROR</level>
			<!-- 匹配到就禁止 -->
			<onMatch>DENY</onMatch>
			<!-- 没有匹配到就允许 -->
			<onMismatch>ACCEPT</onMismatch>
		</filter>
		<!-- 日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，-->
		<!-- 那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的 -->
		<File>${logdir}/${appname}.info.log</File>
		<!-- 滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<!-- %i：当文件大小超过maxFileSize时，按照i进行文件滚动 -->
			<FileNamePattern>${logdir}/%d{yyyy-MM, aux}/${appname}.info.%d{yyyy-MM-dd}-%i.log</FileNamePattern>
			
			<!--只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<!--<totalSizeCap>1GB</totalSizeCap> -->

			<!-- 当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 -->
			<!-- 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy才会滚动 -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>500MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<!-- %d{HH: mm:ss.SSS}——日志输出时间 -->
			<!-- %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用 -->
			<!-- %-5level——日志级别，并且使用5个字符靠左对齐 -->
			<!-- %logger{36}——日志输出者的名字 最长36个字符，否则按照句点分割 -->
			<!-- %line——行数 -->
			<!-- %msg——日志消息 -->
			<!-- %n——平台的换行符 -->
			<pattern>%d %contextName [%thread] %-5level %logger{36} %line : %msg%n</pattern>
		</encoder>
	</appender>
	
	<appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>Error</level>
		</filter>
		<!-- 日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>， -->
		<!-- 那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的 -->
		<File>${logdir}/${appname}.error.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<!-- %i：当文件大小超过maxFileSize时，按照i进行文件滚动 -->
			<FileNamePattern>${logdir}/%d{yyyy-MM, aux}/${appname}.error.%d{yyyy-MM-dd}-%i.log</FileNamePattern>
			
			<!--只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<!--<totalSizeCap>1GB</totalSizeCap> -->

			<!-- 当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 -->
			<!-- 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy才会滚动 -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>500MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<!-- %d{HH: mm:ss.SSS}——日志输出时间 -->
			<!-- %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用 -->
			<!-- %-5level——日志级别，并且使用5个字符靠左对齐 -->
			<!-- %logger{36}——日志输出者的名字 最长36个字符，否则按照句点分割 -->
			<!-- %line——行数 -->
			<!-- %msg——日志消息 -->
			<!-- %n——平台的换行符 -->
			<pattern>%d %contextName [%thread] %-5level %logger{36} %line : %msg%n</pattern>
		</encoder>
	</appender>
	
	<appender name="fileAllLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- <Prudent>true</Prudent> -->
		<!-- 日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>， -->
		<!-- 那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的 -->
		<File>${logdir}/${appname}.all.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<!-- %i：当文件大小超过maxFileSize时，按照i进行文件滚动 -->
			<FileNamePattern>${logdir}/%d{yyyy-MM, aux}/${appname}.all.%d{yyyy-MM-dd}-%i.log</FileNamePattern>
			
			<!--只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<!--<totalSizeCap>1GB</totalSizeCap> -->

			<!-- 当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 -->
			<!-- 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy才会滚动 -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>500MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<!-- %d{HH: mm:ss.SSS}——日志输出时间 -->
			<!-- %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用 -->
			<!-- %-5level——日志级别，并且使用5个字符靠左对齐 -->
			<!-- %logger{36}——日志输出者的名字 最长36个字符，否则按照句点分割 -->
			<!-- %line——行数 -->
			<!-- %msg——日志消息 -->
			<!-- %n——平台的换行符 -->
			<pattern>%d %contextName [%thread] %-5level %logger{36} %line : %msg%n</pattern>
		</encoder>
	</appender>

	<!-- <logger> 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定 <appender> -->
	<!-- <logger> 仅有一个 name 属性，一个可选的 level 和一个可选的 addtivity 属性 -->
	<!-- name :用来指定受此loger约束的某一个包或者具体的某一个类 -->
	<!-- level :用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。 -->
	<!-- addtivity :是否向上级loger传递打印信息。默认是true 作用在于children-logger是否使用 rootLogger配置的appender进行输出，
			 false:表示只用当前logger的appender-ref
			 true:表示当前logger的appender-ref和rootLogger的appender-ref都有效-->
	<logger name="com.bluewhale.spring.boot.controller.BlueWhaleCtrl" level="DEBUG" additivity="false">
		<appender-ref ref="consoleLog" />
		<appender-ref ref="fileInfoLog" />
		<appender-ref ref="fileErrorLog" />
		<appender-ref ref="fileAllLog" />
	</logger>

	<!-- 多环境配置 -->
	<!-- 开发环境. 多个使用逗号隔开 -->
	<springProfile name="dev">
		<logger name="com.bluewhale.spring.boot.controller" level="INFO" additivity="false">
			<!-- <appender-ref ref="consoleLog" /> -->
			<appender-ref ref="fileInfoLog" />
			<appender-ref ref="fileErrorLog" />
			<appender-ref ref="fileAllLog" />
		</logger>
	</springProfile>
	<!-- 生产环境. -->
	<springProfile name="prod">
		<logger name="com.bluewhale.spring.boot.controller" level="INFO" additivity="false">
			<!-- <appender-ref ref="consoleLog" /> -->
			<appender-ref ref="fileInfoLog" />
			<appender-ref ref="fileErrorLog" />
			<appender-ref ref="fileAllLog" />
		</logger>
	</springProfile>
	
	<!-- 指定最基础的日志输出级别 -->
	<!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性 -->
	<!-- level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL,默认是DEBUG-->
	<!-- 可以包含零个或多个元素，标识这个appender将会添加到这个loger 标识过additivity="false"的不会输出到此-->
	<root level="INFO">
		<!--appender将会添加到这个loger -->
		<appender-ref ref="consoleLog" />
		<appender-ref ref="fileInfoLog" />
		<appender-ref ref="fileErrorLog" />
		<appender-ref ref="fileAllLog" />
	</root>

</configuration>